generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id              String          @id @default(uuid())
  email           String          @unique
  name            String?
  image           String?
  emailVerifiedAt DateTime?
  createdAt       DateTime        @default(now())
  memberships     OrgMembership[]
  accounts        Account[]
  invitations     Invitation[]
  organizations   Organization[]
}
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailOTP {
  id         String   @id @default(cuid())
  email      String
  codeHash   String
  attempts   Int      @default(0)
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())

  @@index([email, expiresAt])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

model Invitation {
  id               String     @id @default(cuid())
  orgId            String     
  email            String     
  role             String     
  tokenHash        String     @unique
  invitedByUserId  String?
  status           InvitationStatus @default(PENDING)
  expiresAt        DateTime
  acceptedAt       DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  org              Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  invitedByUser    User?        @relation(fields: [invitedByUserId], references: [id], onDelete: SetNull)

  @@index([orgId, email, status])
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Organization {
  id               String          @id @default(uuid())
  name             String
  slug             String          @unique
  ownerUserId      String
  ownerUser        User            @relation(fields: [ownerUserId], references: [id], onDelete: Restrict)
  plan             String          @default("business")
  entitlementsJSON Json            @default("{}")
  createdAt        DateTime        @default(now())
  memberships      OrgMembership[]
  ingestionJobs    IngestionJob[]
  departments      Department[]
  invitations      Invitation[]
}

enum OrgMembershipRole {
  OWNER
  ADMIN
  MEMBER
}

model OrgMembership {
  id        String   @id @default(uuid())
  orgId     String
  userId    String
  role      OrgMembershipRole
  createdAt DateTime @default(now())

  user User         @relation(fields: [userId], references: [id])
  org  Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, userId])
  @@index([userId])
}

model Department {
  id        String       @id @default(uuid())
  orgId     String
  name      String
  createdAt DateTime     @default(now())
  org       Organization @relation(fields: [orgId], references: [id])
  teams     Team[]

  @@index([orgId, name])
}

model Team {
  id           String     @id @default(uuid())
  departmentId String
  name         String
  createdAt    DateTime   @default(now())
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  categories   Category[]
  process      Process[]
  newsPost     NewsPost[]

  @@index([departmentId, name])
}

model Category {
  id        String    @id @default(uuid())
  teamId    String
  name      String
  sortOrder Int       @default(0)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  processes Process[]

  @@index([teamId, sortOrder])
}

enum ProcessStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProcessStyle {
  RAW
  STEPS
  FLOW
  YESNO
}

model Process {
  id                 String   @id @default(uuid())
  teamId             String
  categoryId         String?
  slug               String
  title              String
  description        String?
  style              ProcessStyle 
  status             ProcessStatus 
  pendingVersionId   String?
  publishedVersionId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  team     Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  ingestionJobs IngestionJob[]
  category Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@unique([teamId, slug])

  @@index([teamId, categoryId])
  @@index([teamId, title])
  @@index([teamId, slug])
}



model ProcessVersion {
  id          String   @id @default(uuid())
  processId   String
  createdBy   String
  createdAt   DateTime @default(now())
  style       ProcessStyle
  contentJSON Json
  contentText String?
  ingestionJobs IngestionJob[]

}

model NewsPost {
  id        String   @id @default(uuid())
  teamId    String
  title     String
  bodyJSON  Json
  pinned    Boolean  @default(false)
  createdBy String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId, createdAt])
}

model Favorite {
  userId    String
  processId String

  @@id([userId, processId])
}

enum IdeaStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model Idea {
  id        String   @id @default(uuid())
  teamId    String
  createdBy String
  title     String
  body      String
  status    IdeaStatus   @default(NEW)
  createdAt DateTime @default(now())

  @@index([teamId, status, createdAt])
}

enum ErrorReportStatus {
  OPEN
  RESOLVED
  ARCHIVED
}

model ErrorReport {
  id        String   @id @default(uuid())
  processId String
  createdBy String
  body      String
  status    ErrorReportStatus   @default(OPEN)
  createdAt DateTime @default(now())

  @@index([processId, status, createdAt])
}

enum IngestionJobStatus {
  QUEUED
  PARSING
  GENERATING
  FAILED
  READY
}

model IngestionJob {
  id              String   @id @default(uuid())
  orgId           String
  processId       String
  sourceType      String // pdf | docx | text
  fileKey         String?
  status          IngestionJobStatus
  error           String?
  outputVersionId String?
  outputVersion   ProcessVersion? @relation(fields: [outputVersionId], references: [id], onDelete: SetNull)
  createdAt       DateTime @default(now())

  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  process Process @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([orgId, status, createdAt])
  @@index([processId, status, createdAt])
}

model AuditLog {
  id         String   @id @default(uuid())
  orgId      String
  actorId    String
  action     String
  entityType String
  entityId   String
  at         DateTime @default(now())
  beforeJSON Json?
  afterJSON  Json?
}
